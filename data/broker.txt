// Task Scheduler
Scheduler runner;

// Business Logic Task
    class BusinessLogicTask : public Task {
public:
    BusinessLogicTask(uint32_t interval, Scheduler* aScheduler) : Task(interval, TASK_FOREVER, aScheduler, true) {}

    bool Callback() {
        // Implement your business logic here
        Serial.println("Business Logic Task Called.");
        return true; // Return true to keep the task running
    }
};

// Network Communication Task
class NetworkTask : public Task {
public:
    NetworkTask(uint32_t interval, Scheduler* aScheduler) : Task(interval, TASK_FOREVER, aScheduler, true) {}

    bool Callback() {
        // Implement your network communication logic here
        Serial.println("Network Communication Task Called.");
        return true; // Return true to keep the task running
    }
};

// Instantiate tasks with specific intervals
BusinessLogicTask businessLogicTask(1000, &runner); // Run every 1000 milliseconds (1 second)
NetworkTask networkTask(2000, &runner); // Run every 2000 milliseconds (2 seconds)

// Optionally, you can start the tasks here if you haven't started them in the constructor
    businessLogicTask.enable();
    networkTask.enable();